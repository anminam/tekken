{"version":3,"sources":["components/PersonComponent.tsx","components/Persons/Persons.tsx","components/Persons/index.tsx","actions/Main.ts","actions/MainType.ts","core/Person.ts","core/Utils.ts","core/Tk.ts","components/TestContainer.tsx","actions/Test.ts","actions/TestType.ts","components/PersonName.tsx","components/BigPerson.tsx","containers/BigPersonContainer/index.tsx","tekken/Tekken.tsx","reducers/Test.ts","reducers/Main.ts","reducers/index.ts","lib/loggerMiddleware.ts","App.tsx","index.tsx"],"names":["onClick","selectPerson","index","mouseOver","PersonComponent","name","isSeleted","className","onMouseOver","Persons","persons","seletedIndex","map","item","i","key","connect","state","other","test","main","dispatch","type","payload","Person","src","this","indexNumber","Utils","start","end","option","undefined","value","Math","random","floor","path","process","list","find","t","instance","Tk","_personList","utils","tempnum","personNames","length","push","_makePerson","callback","tk","makeTestPerson","count","makePerson","PersonName","isOn","toUpperCase","BigPerson","person","url","assetHelper","style","backgroundImage","config","nowFlag","flagLength","init","returnObj","isOn0","isOn1","person0","person1","findObj","nextFlag","Tekken","Test","action","Main","combineReducers","loggerMiddleware","store","next","console","log","getState","result","createStore","reducers","composeWithDevTools","applyMiddleware","Logger","Thunk","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85922dcd.chunk.js","sourcesContent":["import React from \"react\";\nimport Person from \"core/Person\";\n\nexport interface IPersonComponent {\n    name: string;\n    index: number;\n    selectPerson(index:number): any;\n    isSeleted: boolean\n}\n\ninterface IUserEvnet {\n    selectPerson(index: number): any;\n    index: number;\n}\n\nconst PersonComponent = ({name, index, selectPerson, isSeleted}: IPersonComponent) => {\n    return (\n        <div className={`_person ${isSeleted ? '__selected' : '' }`} onClick={()=>onClick({selectPerson, index})} onMouseOver={()=> mouseOver({selectPerson, index})}>\n            <div className={`person-frame ${isSeleted ? '__selected' : '' }`} />\n            <div>{name}</div>\n        </div>\n    )\n}\n\nconst onClick = ({selectPerson, index}: IUserEvnet) => {\n    selectPerson(index);\n}\n\nconst mouseOver = ({selectPerson, index}: IUserEvnet) => {\n    selectPerson(index);\n}\n\nexport default PersonComponent;","import React from 'react';\nimport Person from \"core/Person\";\nimport PersonComponent from 'components/PersonComponent';\nimport {IStateFromProps, IDispatchFromProps} from './index'\n\ntype IPersons = IStateFromProps & IDispatchFromProps;\n\n\nconst Persons = ({persons, seletedIndex, selectPerson}: IPersons) => {\n    return (\n        <div className=\"persons_container\">\n            {\n                persons && persons.map((item:Person, i) => {\n                    let isSeleted = false;\n                    if (seletedIndex === i) {\n                        isSeleted = true;\n                    }\n                    return <PersonComponent key={item.index} index={item.index} name={item.name} selectPerson={selectPerson} isSeleted={isSeleted}/>\n                })\n            }\n            {/* <div className=\"_filter\"></div> */}\n        </div>\n    )\n}\n\nexport default Persons;","import React, { Dispatch } from 'react';\nimport { connect } from \"react-redux\";\nimport Person from \"core/Person\";\nimport Persons from \"./Persons\";\n\nimport {selectPerson} from \"actions/Main\";\n\nexport interface IStateFromProps {\n    persons: Person[];\n    seletedIndex: number;\n}\n  \nexport interface IDispatchFromProps {\n    selectPerson: (index:number) => any;\n}\n\n\nconst mapStateToProps = (state:any, other:any) : IStateFromProps => {\n    return {\n        persons: state.test.persons,\n        seletedIndex: state.main.seletedIndex\n    }\n}\n\nconst mapDispatchToProps = (dispatch:any, other:any) : IDispatchFromProps => {\n    return {\n        selectPerson: (index:number) => dispatch(selectPerson(index))\n    }\n}\n\n\nexport default connect<IStateFromProps, IDispatchFromProps>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Persons);","import { SELET_PERSON } from \"./MainType\";\n\nexport const selectPerson = (payload:number) => {\n    return {\n        type: SELET_PERSON,\n        payload\n    }\n}","export const SELET_PERSON:string = 'SELET_PERSON';","class Person {\n    name:string = '';\n    src:string = '';\n    index:number = -1;\n\n    static indexNumber:number = -1;\n\n    constructor(name:string) {\n        this.name = name;\n        this.index = ++Person.indexNumber;\n        this.src = '';\n    }\n\n    \n\n}\nexport default Person;","import Person from \"core/Person\";\n\nclass Utils {\n    public static instance:Utils;\n\n    private constructor () {\n    }\n\n    public static get Instance() {\n        return this.instance || (this.instance = new this());\n    }\n\n\n    // 여기부터\n\n    public random(start?:number, end?:number): number {\n        const option = {\n            start: 1,\n            end: 100,\n        }\n\n        if(start !== undefined) {\n            option.start = start;\n        }\n        if(end) {\n            option.end = end;\n        }\n        let value = Math.random() * option.end;\n        value = Math.floor(value);\n\n        return value;\n    }\n\n    assetHelper(path:string):string {\n        return `${process.env.PUBLIC_URL}/assets${path}`;\n    }\n\n    public findObj<T,U>(list:any[], key:string, value:U):T {\n        const o = list.find(t => t[key] === value);\n        return o;\n    }\n    \n}\n\nexport default Utils.Instance;","import Person from \"core/Person\";\nimport Utils from 'core/Utils';\n\nclass Tk {\n    public static instance:Tk;\n\n    private _personList:Person[];\n\n\n    public utils = Utils;\n\n    private constructor () {\n        this._personList = [];\n    }\n\n    tempnum = 0;\n    public makeTestPerson () {\n        const personNames = [\n            'anminam',\n            'insun',\n            'suckwind'\n        ];\n        \n        // 랜덤\n        let r = this.utils.random(0, personNames.length -1);\n\n        // 순서대로\n        r = this.tempnum++;\n        const personName = personNames[r];\n        return personName;\n    }\n\n    public MakePerson (name:string) {\n        this._personList.push(new Person(name));\n    }\n\n    public getPersons() {\n        return this._personList;\n    }\n\n    public static get Instance() {\n        return this.instance || (this.instance = new this());\n    }\n    \n}\n\nexport default Tk.Instance;","import React from 'react';\nimport { makePerson } from \"actions\";\nimport { connect } from \"react-redux\";\nimport {Dispatch}from \"redux\";\nimport tk from \"core/Tk\";\n\nconst TestContainer = ({makePerson}:any) => {\n    return (\n        <div className=\"_test_container\">\n            <button type=\"button\" onClick={()=>_makePerson(makePerson)}>생성</button>\n        </div>\n    )\n}\n\nconst _makePerson = (callback:any) => {\n    const name = tk.makeTestPerson();\n    callback(name);\n}\n\n\nconst mapStateToProps = (state:any) => ({\n  count: 1\n});\nconst mapDispatchToProps = (dispatch:Dispatch) => {\n    return {\n        makePerson: (name: string) => dispatch(makePerson(name))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(TestContainer);","import { MAKE_PERSON } from \"./TestType\";\n\nexport const makePerson = (name:string) => {\n    return {\n        type: MAKE_PERSON,\n        name\n    }\n}","export const MAKE_PERSON:string = 'MAKE_PERSON';","import React from \"react\";\n\n\ninterface IPersonName {\n    name: string\n    isOn: boolean\n}\n\nconst PersonName = ({name, isOn}:IPersonName) => {\n    return (\n        <div className=\"person-name-wapper\">\n            <div className={`text-1 ${isOn ? '__selected': ''}`}>\n                {name.toUpperCase()}\n            </div>\n        </div>\n    )\n}\n\nexport default PersonName;","import React from 'react';\nimport tk from \"core/Tk\";\nimport Person from 'core/Person';\nimport PersonName from \"components/PersonName\";\ninterface IBigPerson {\n    person?:Person,\n    isOn: boolean\n}\nconst BigPerson = ({person, isOn}:IBigPerson) => {\n    const name:string = person ? person.name : '';\n\n    const url = tk.utils.assetHelper(`/images/bigperson/${name}.png`);\n    // const url = process.env.PUBLIC_URL + '/assets/images/bigperson/' + name +'.png';\n\n    return (\n        <div className=\"big-person-container\">\n            <div className={`__item __pictrue ${isOn ? 'show' : ''}`}>\n                {\n                    name && \n                    <div className=\"__img\" style={{backgroundImage: `url(${url})`}}></div>\n                }\n            </div>  \n            <PersonName name={name} isOn={isOn}/>\n        </div>\n    )\n}\n\n\nexport default BigPerson;","import React from 'react';\nimport BigPerson from 'components/BigPerson';\nimport { connect } from \"react-redux\";\nimport Person from 'core/Person';\nimport tk from 'core/Tk';\nconst BigPersonContainer = ({seletedIndex, persons}: IBigPersonContainer) => {\n    const {\n        isOn0,\n        isOn1,\n        person0,\n        person1\n    } = init({seletedIndex, persons});\n    return (\n        <>\n            <BigPerson person={person0} isOn={isOn0} />\n            <BigPerson person={person1} isOn={isOn1} />\n        </>\n    )\n}\n\n\ninterface IInitInterface {\n    isOn0: boolean\n    isOn1: boolean\n    person0?: Person\n    person1?: Person\n}\n\n\ninterface IConfig {\n    nowFlag: number,\n    flagLength: number\n}\n\nconst config:IConfig = {\n    nowFlag: 1,\n    flagLength: 2\n}\n\ntype IBigPersonContainer = IStateFromProps & IDispatchFromProps;\n\n\nconst init = ({seletedIndex, persons}: IStateFromProps) : IInitInterface => {\n\n    const returnObj:IInitInterface = {\n        isOn0: false,\n        isOn1: false,\n        person0: undefined,\n        person1: undefined,\n    }\n    \n    const person = tk.utils.findObj<Person, number>(persons, 'index', seletedIndex);\n    if (!person) {\n        return returnObj;\n\n    }\n\n    // flag 초기화\n    const nowFlag:number = config.nowFlag;\n    // 셋팅\n    \n    const nextFlag = nowFlag === 1 ? 0 : 1;\n\n    if (nextFlag === 0) {\n        returnObj.isOn0 = true;\n        returnObj.person0 = person;\n\n    } else {\n        returnObj.isOn1 = true;\n        returnObj.person1 = person;\n\n    }\n\n    config.nowFlag = nextFlag;\n\n    return returnObj;\n}\n\n\n\n\n\nexport interface IStateFromProps {\n    persons: Person[];\n    seletedIndex: number;\n}\n  \nexport interface IDispatchFromProps {\n    selectPerson: (index:number) => void;\n}\n\n\nconst mapStateToProps = (state:any, other:any) : IStateFromProps => {\n    return {\n        persons: state.test.persons,\n        seletedIndex: state.main.seletedIndex\n    }\n}\n\nconst mapDispatchToProps = (dispatch:any, other:any) : IDispatchFromProps => {\n    return {\n        selectPerson: () => {}\n    }\n}\n\n\nexport default connect<IStateFromProps, IDispatchFromProps>(\n    mapStateToProps,\n    mapDispatchToProps\n)(BigPersonContainer);\n","import React from 'react';\nimport Background from \"components/Background\";\nimport Persons from \"components/Persons\";\nimport TestContainer from 'components/TestContainer';\nimport BigPersonContainer from 'containers/BigPersonContainer';\n\nconst Tekken = () => {\n\n    return (\n        <div>\n            {/* <Background /> */}\n            <Persons />\n            <TestContainer />\n            <BigPersonContainer />\n        </div>\n    )\n}\n\nexport default Tekken;","import { MAKE_PERSON } from \"actions\";\nimport tk from 'core/Tk';\nimport Person from \"core/Person\";\n\nexport interface ITestType {\n    [persons:string]: Person[]\n}\nconst init:ITestType = {\n    persons:[]\n}\n\nconst Test = (state = init, action:any) => {\n    switch(action.type) {\n        case MAKE_PERSON:\n            return {\n                ...state,\n                persons: [\n                    ...state.persons,\n                    new Person(action.name)\n                ]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default Test;","import { SELET_PERSON } from \"actions\";\n\nexport interface IMainType {\n    seletedIndex: number\n}\nconst init:IMainType = {\n    seletedIndex: -1\n}\n\nconst Main = (state = init, action:any) => {\n    switch(action.type) {\n        case SELET_PERSON:\n            return {\n                ...state,\n                seletedIndex: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default Main;","\n\nimport { combineReducers } from \"redux\";\nimport test from './Test';\nimport main from './Main';\n\n\nexport default combineReducers({\n    main,\n    test\n});\n","const loggerMiddleware = (store: { getState: () => any; }) => (next: (arg0: any) => any) => (action: any) => {\n    console.log('현재', store.getState());\n    \n    console.log('액션',action);\n\n    const result = next(action);\n\n    console.log('다음 상태',store.getState());\n    console.log('\\n');\n\n    return result;\n}\n\nexport default loggerMiddleware;","import React from 'react';\n// import logo from './logo.svg';\n// import 'App.css';\nimport Tekken from 'tekken/Tekken';\nimport Tktest from \"tktest/Tktest\";\nimport {createStore, applyMiddleware}from 'redux';\nimport reducers from \"reducers\";\nimport { Provider } from 'react-redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport Logger from 'lib/loggerMiddleware';\nimport Thunk from 'redux-thunk';\n\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(reducers,\n  composeWithDevTools(applyMiddleware(Logger,Thunk)));\n/* eslint-enable */\n\nfunction App() {\n  \n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n        </header>\n        <Tekken></Tekken>\n        {/* <Tktest /> */}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'style/index.scss'\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}